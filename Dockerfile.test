FROM payara/server-full:5.2022.5-jdk11

USER root

# Instalar herramientas de diagnóstico
RUN apt-get update && apt-get install -y curl wget netcat iputils-ping procps

# Configurar variables de entorno (si aún las necesitas, aunque el script entrypoint las puede usar)
ENV DB_SERVER=postgres-test \
    DB_PORT=5432 \
    DB_NAME=tipicos_test \
    DB_USER=postgres \
    DB_PASSWORD=postgres \
    DEPLOY_DIR=/opt/payara/deployments \
    PAYARA_ARGS="--contextroot=tipicos-api"

# Copiar driver y configuración
COPY postgresql-42.5.1.jar ${PAYARA_DIR}/glassfish/domains/domain1/lib/
COPY src/main/resources/META-INF/persistence.xml ${PAYARA_DIR}/glassfish/domains/domain1/config/

# Crear directorio para despliegue
RUN mkdir -p ${DEPLOY_DIR}

# Copiar script mejorado para configurar datasource
COPY scripts/setup-test-datasource.sh /opt/payara/scripts/
RUN chmod +x /opt/payara/scripts/setup-test-datasource.sh

# --- Añadir estas líneas para el script de entrada ---
# Copiar el script de entrada
COPY entrypoint.sh /opt/payara/
# Hacerlo ejecutable
RUN chmod +x /opt/payara/entrypoint.sh
# --- Fin de las líneas añadidas ---

USER payara

# --- Eliminar o comentar todas las líneas CMD anteriores ---
# Comando para iniciar el servidor con nuestro script
#CMD ["/opt/payara/scripts/start-server.sh"]
#CMD ["bin/startInForeground.sh"]
# Añadir este comando al final
#CMD ${SCRIPT_DIR}/setup-datasource.sh
# --- Fin de la eliminación/comentario ---


# Definir el script de entrada que se ejecutará al iniciar el contenedor
ENTRYPOINT ["/opt/payara/entrypoint.sh"]

# Opcional: Puedes dejar una CMD para definir argumentos por defecto al ENTRYPOINT,
# pero para este caso, el entrypoint es suficiente por sí solo.
# CMD []
