services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:16
    container_name: tipicos-db
    environment:
      POSTGRES_DB: tipicos_tpi135
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres  
    ports:
      - 5433:5432 
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./tipicos_tpi135_2025.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [CMD-SHELL, pg_isready -U postgres]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # Servidor GlassFish
  app:
    build: .
    container_name: tipicos-app
    ports:
      - 9080:8080  # Puerto HTTP
      - 4849:4848  # Puerto Admin
      - 8182:8181  # Puerto HTTPS
    environment:
      - DB_SERVER=postgres
      - DB_PORT=5432
      - DB_NAME=tipicos_tpi135
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres-data:
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      # Servicio PostgreSQL para pruebas
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: tipicos_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven

      - name: Initialize test database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d tipicos_test -c -- Script de inicialización de la base de datos para pruebas -- Creación de tablas CREATE TABLE IF NOT EXISTS public.tipo_producto ( id_tipo_producto SERIAL PRIMARY KEY, nombre character varying(155) NOT NULL, activo boolean DEFAULT true, observaciones text ); COMMENT ON TABLE public.tipo_producto IS 'Califica los tipos de productos'; CREATE TABLE IF NOT EXISTS public.producto ( id_producto BIGSERIAL PRIMARY KEY, nombre character varying(155), activo boolean DEFAULT true, observaciones text ); COMMENT ON TABLE public.producto IS 'Productos disponibles para consumo'; CREATE TABLE IF NOT EXISTS public.producto_detalle ( id_tipo_producto integer NOT NULL, id_producto bigint NOT NULL, activo boolean DEFAULT true, observaciones text, PRIMARY KEY (id_tipo_producto, id_producto), CONSTRAINT fk_producto_detalle_producto FOREIGN KEY (id_producto) REFERENCES public.producto (id_producto) ON UPDATE CASCADE ON DELETE RESTRICT, CONSTRAINT fk_producto_detalle_tipo_producto FOREIGN KEY (id_tipo_producto) REFERENCES public.tipo_producto (id_tipo_producto) ON UPDATE CASCADE ON DELETE RESTRICT ); COMMENT ON TABLE public.producto_detalle IS 'Determina los tipos de producto que aplican para un producto'; CREATE TABLE IF NOT EXISTS public.producto_precio ( id_producto_precio BIGSERIAL PRIMARY KEY, id_producto bigint, fecha_desde date DEFAULT now(), fecha_hasta date, precio_sugerido numeric(8,2), CONSTRAINT fk_producto_precio_producto FOREIGN KEY (id_producto) REFERENCES public.producto (id_producto) ON UPDATE CASCADE ON DELETE RESTRICT ); -- Inserción de datos de prueba INSERT INTO public.tipo_producto (nombre, activo, observaciones) VALUES ('bebida', true, 'Bebidas de todo tipo'), ('comida', true, 'Platillos principales'), ('tipicos', true, 'Comida típica salvadoreña'); -- Insertar productos iniciales para pruebas INSERT INTO public.producto (nombre, activo, observaciones) VALUES ('Pupusa de Queso', true, 'Pupusa tradicional de queso'), ('Pupusa de Chicharrón', true, 'Pupusa tradicional de chicharrón molido'), ('Pupusa Revuelta', true, 'Pupusa de queso con chicharrón'), ('Horchata', true, 'Bebida típica de semillas y especias'), ('Café de Olla', true, 'Café tradicional preparado en olla de barro'); -- Relacionar productos con tipos INSERT INTO public.producto_detalle (id_tipo_producto, id_producto, activo) VALUES (3, 1, true), (3, 2, true), (3, 3, true), (1, 4, true), (1, 5, true); -- Insertar precios para los productos INSERT INTO public.producto_precio (id_producto, fecha_desde, precio_sugerido) VALUES (1, '2025-01-01', 1.00), (2, '2025-01-01', 1.25), (3, '2025-01-01', 1.50), (4, '2025-01-01', 1.75), (5, '2025-01-01', 1.50);

      # COMPILACIÓN
      - name: Build with Maven
        run: mvn -B clean compile

      # PRUEBAS UNITARIAS (15%)
      - name: Run Unit Tests
        run: mvn -B test
        
      # PRUEBAS DE COBERTURA (15%)
      - name: Generate JaCoCo Coverage Report
        run: mvn -B jacoco:report
        
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: target/site/jacoco/

      # PRUEBAS DE INTEGRACIÓN (15%)
      - name: Run Integration Tests
        run: mvn -B verify -P integration-test

      # PRUEBAS DE SISTEMA (15%)
      - name: Package Application
        run: mvn -B package -DskipTests

      - name: Set up Docker Containers for System Tests
        run: |
          docker-compose -f docker-compose.test.yml up -d
          # Esperar a que los servicios estén listos
          sleep 30

      - name: Run System Tests
        run: mvn -B verify -P system-tests -Dapi.url=http://localhost:8080/tipicos-api/api

      - name: Collect Test Results
        if: always()
        run: |
          mkdir -p test-results
          cp -r target/surefire-reports/* test-results/ || true
          cp -r target/failsafe-reports/* test-results/ || true

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results/

      # ARTEFACTO FINAL
      - name: Package Final Artifact
        run: mvn -B package -DskipTests
        
      - name: Upload WAR Artifact
        uses: actions/upload-artifact@v3
        with:
          name: tipicos-api
          path: target/tipicos-api.war
